// ag-grid-ng2 v6.4.0
/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('./agGridNg2');
var import1 = require('@angular/core/src/change_detection/change_detection');
var import2 = require('@angular/core/src/linker/view_utils');
var import3 = require('@angular/core/src/linker/view');
var import5 = require('@angular/core/src/linker/element');
var import6 = require('@angular/core/src/linker/query_list');
var import8 = require('@angular/core/src/linker/view_type');
var import9 = require('@angular/core/src/linker/element_ref');
var import10 = require('./ng2FrameworkFactory');
var import11 = require('@angular/core/src/metadata/view');
var import12 = require('@angular/core/src/linker/component_factory');
var Wrapper_AgGridNg2 = (function () {
    function Wrapper_AgGridNg2(p0, p1, p2) {
        this.changed = false;
        this.changes = {};
        this.context = new import0.AgGridNg2(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
        this._expr_7 = import1.UNINITIALIZED;
        this._expr_8 = import1.UNINITIALIZED;
        this._expr_9 = import1.UNINITIALIZED;
        this._expr_10 = import1.UNINITIALIZED;
        this._expr_11 = import1.UNINITIALIZED;
        this._expr_12 = import1.UNINITIALIZED;
        this._expr_13 = import1.UNINITIALIZED;
        this._expr_14 = import1.UNINITIALIZED;
        this._expr_15 = import1.UNINITIALIZED;
        this._expr_16 = import1.UNINITIALIZED;
        this._expr_17 = import1.UNINITIALIZED;
        this._expr_18 = import1.UNINITIALIZED;
        this._expr_19 = import1.UNINITIALIZED;
        this._expr_20 = import1.UNINITIALIZED;
        this._expr_21 = import1.UNINITIALIZED;
        this._expr_22 = import1.UNINITIALIZED;
        this._expr_23 = import1.UNINITIALIZED;
        this._expr_24 = import1.UNINITIALIZED;
        this._expr_25 = import1.UNINITIALIZED;
        this._expr_26 = import1.UNINITIALIZED;
        this._expr_27 = import1.UNINITIALIZED;
        this._expr_28 = import1.UNINITIALIZED;
        this._expr_29 = import1.UNINITIALIZED;
        this._expr_30 = import1.UNINITIALIZED;
        this._expr_31 = import1.UNINITIALIZED;
        this._expr_32 = import1.UNINITIALIZED;
        this._expr_33 = import1.UNINITIALIZED;
        this._expr_34 = import1.UNINITIALIZED;
        this._expr_35 = import1.UNINITIALIZED;
        this._expr_36 = import1.UNINITIALIZED;
        this._expr_37 = import1.UNINITIALIZED;
        this._expr_38 = import1.UNINITIALIZED;
        this._expr_39 = import1.UNINITIALIZED;
        this._expr_40 = import1.UNINITIALIZED;
        this._expr_41 = import1.UNINITIALIZED;
        this._expr_42 = import1.UNINITIALIZED;
        this._expr_43 = import1.UNINITIALIZED;
        this._expr_44 = import1.UNINITIALIZED;
        this._expr_45 = import1.UNINITIALIZED;
        this._expr_46 = import1.UNINITIALIZED;
        this._expr_47 = import1.UNINITIALIZED;
        this._expr_48 = import1.UNINITIALIZED;
        this._expr_49 = import1.UNINITIALIZED;
        this._expr_50 = import1.UNINITIALIZED;
        this._expr_51 = import1.UNINITIALIZED;
        this._expr_52 = import1.UNINITIALIZED;
        this._expr_53 = import1.UNINITIALIZED;
        this._expr_54 = import1.UNINITIALIZED;
        this._expr_55 = import1.UNINITIALIZED;
        this._expr_56 = import1.UNINITIALIZED;
        this._expr_57 = import1.UNINITIALIZED;
        this._expr_58 = import1.UNINITIALIZED;
        this._expr_59 = import1.UNINITIALIZED;
        this._expr_60 = import1.UNINITIALIZED;
        this._expr_61 = import1.UNINITIALIZED;
        this._expr_62 = import1.UNINITIALIZED;
        this._expr_63 = import1.UNINITIALIZED;
        this._expr_64 = import1.UNINITIALIZED;
        this._expr_65 = import1.UNINITIALIZED;
        this._expr_66 = import1.UNINITIALIZED;
        this._expr_67 = import1.UNINITIALIZED;
        this._expr_68 = import1.UNINITIALIZED;
        this._expr_69 = import1.UNINITIALIZED;
        this._expr_70 = import1.UNINITIALIZED;
        this._expr_71 = import1.UNINITIALIZED;
        this._expr_72 = import1.UNINITIALIZED;
        this._expr_73 = import1.UNINITIALIZED;
        this._expr_74 = import1.UNINITIALIZED;
        this._expr_75 = import1.UNINITIALIZED;
        this._expr_76 = import1.UNINITIALIZED;
        this._expr_77 = import1.UNINITIALIZED;
        this._expr_78 = import1.UNINITIALIZED;
        this._expr_79 = import1.UNINITIALIZED;
        this._expr_80 = import1.UNINITIALIZED;
        this._expr_81 = import1.UNINITIALIZED;
        this._expr_82 = import1.UNINITIALIZED;
        this._expr_83 = import1.UNINITIALIZED;
        this._expr_84 = import1.UNINITIALIZED;
        this._expr_85 = import1.UNINITIALIZED;
        this._expr_86 = import1.UNINITIALIZED;
        this._expr_87 = import1.UNINITIALIZED;
        this._expr_88 = import1.UNINITIALIZED;
        this._expr_89 = import1.UNINITIALIZED;
        this._expr_90 = import1.UNINITIALIZED;
        this._expr_91 = import1.UNINITIALIZED;
        this._expr_92 = import1.UNINITIALIZED;
        this._expr_93 = import1.UNINITIALIZED;
        this._expr_94 = import1.UNINITIALIZED;
        this._expr_95 = import1.UNINITIALIZED;
        this._expr_96 = import1.UNINITIALIZED;
        this._expr_97 = import1.UNINITIALIZED;
        this._expr_98 = import1.UNINITIALIZED;
        this._expr_99 = import1.UNINITIALIZED;
        this._expr_100 = import1.UNINITIALIZED;
        this._expr_101 = import1.UNINITIALIZED;
        this._expr_102 = import1.UNINITIALIZED;
        this._expr_103 = import1.UNINITIALIZED;
        this._expr_104 = import1.UNINITIALIZED;
        this._expr_105 = import1.UNINITIALIZED;
        this._expr_106 = import1.UNINITIALIZED;
        this._expr_107 = import1.UNINITIALIZED;
        this._expr_108 = import1.UNINITIALIZED;
        this._expr_109 = import1.UNINITIALIZED;
        this._expr_110 = import1.UNINITIALIZED;
        this._expr_111 = import1.UNINITIALIZED;
        this._expr_112 = import1.UNINITIALIZED;
        this._expr_113 = import1.UNINITIALIZED;
        this._expr_114 = import1.UNINITIALIZED;
        this._expr_115 = import1.UNINITIALIZED;
        this._expr_116 = import1.UNINITIALIZED;
        this._expr_117 = import1.UNINITIALIZED;
        this._expr_118 = import1.UNINITIALIZED;
        this._expr_119 = import1.UNINITIALIZED;
        this._expr_120 = import1.UNINITIALIZED;
        this._expr_121 = import1.UNINITIALIZED;
        this._expr_122 = import1.UNINITIALIZED;
        this._expr_123 = import1.UNINITIALIZED;
        this._expr_124 = import1.UNINITIALIZED;
        this._expr_125 = import1.UNINITIALIZED;
        this._expr_126 = import1.UNINITIALIZED;
        this._expr_127 = import1.UNINITIALIZED;
        this._expr_128 = import1.UNINITIALIZED;
        this._expr_129 = import1.UNINITIALIZED;
        this._expr_130 = import1.UNINITIALIZED;
        this._expr_131 = import1.UNINITIALIZED;
        this._expr_132 = import1.UNINITIALIZED;
    }
    Wrapper_AgGridNg2.prototype.check_gridOptions = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this.changed = true;
            this.context.gridOptions = currValue;
            this.changes['gridOptions'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_slaveGrids = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this.changed = true;
            this.context.slaveGrids = currValue;
            this.changes['slaveGrids'] = new import1.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this.changed = true;
            this.context.rowData = currValue;
            this.changes['rowData'] = new import1.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_floatingTopRowData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this.changed = true;
            this.context.floatingTopRowData = currValue;
            this.changes['floatingTopRowData'] = new import1.SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_floatingBottomRowData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this.changed = true;
            this.context.floatingBottomRowData = currValue;
            this.changes['floatingBottomRowData'] = new import1.SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_columnDefs = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this.changed = true;
            this.context.columnDefs = currValue;
            this.changes['columnDefs'] = new import1.SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_defaultColDef = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this.changed = true;
            this.context.defaultColDef = currValue;
            this.changes['defaultColDef'] = new import1.SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowStyle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this.changed = true;
            this.context.rowStyle = currValue;
            this.changes['rowStyle'] = new import1.SimpleChange(this._expr_7, currValue);
            this._expr_7 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_context = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this.changed = true;
            this.context.context = currValue;
            this.changes['context'] = new import1.SimpleChange(this._expr_8, currValue);
            this._expr_8 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupColumnDef = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_9, currValue))) {
            this.changed = true;
            this.context.groupColumnDef = currValue;
            this.changes['groupColumnDef'] = new import1.SimpleChange(this._expr_9, currValue);
            this._expr_9 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_localeText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_10, currValue))) {
            this.changed = true;
            this.context.localeText = currValue;
            this.changes['localeText'] = new import1.SimpleChange(this._expr_10, currValue);
            this._expr_10 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_icons = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_11, currValue))) {
            this.changed = true;
            this.context.icons = currValue;
            this.changes['icons'] = new import1.SimpleChange(this._expr_11, currValue);
            this._expr_11 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_datasource = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_12, currValue))) {
            this.changed = true;
            this.context.datasource = currValue;
            this.changes['datasource'] = new import1.SimpleChange(this._expr_12, currValue);
            this._expr_12 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_viewportDatasource = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_13, currValue))) {
            this.changed = true;
            this.context.viewportDatasource = currValue;
            this.changes['viewportDatasource'] = new import1.SimpleChange(this._expr_13, currValue);
            this._expr_13 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowRendererParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_14, currValue))) {
            this.changed = true;
            this.context.groupRowRendererParams = currValue;
            this.changes['groupRowRendererParams'] = new import1.SimpleChange(this._expr_14, currValue);
            this._expr_14 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_aggFuncs = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_15, currValue))) {
            this.changed = true;
            this.context.aggFuncs = currValue;
            this.changes['aggFuncs'] = new import1.SimpleChange(this._expr_15, currValue);
            this._expr_15 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_fullWidthCellRendererParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_16, currValue))) {
            this.changed = true;
            this.context.fullWidthCellRendererParams = currValue;
            this.changes['fullWidthCellRendererParams'] = new import1.SimpleChange(this._expr_16, currValue);
            this._expr_16 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_sortingOrder = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_17, currValue))) {
            this.changed = true;
            this.context.sortingOrder = currValue;
            this.changes['sortingOrder'] = new import1.SimpleChange(this._expr_17, currValue);
            this._expr_17 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_18, currValue))) {
            this.changed = true;
            this.context.rowClass = currValue;
            this.changes['rowClass'] = new import1.SimpleChange(this._expr_18, currValue);
            this._expr_18 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowSelection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_19, currValue))) {
            this.changed = true;
            this.context.rowSelection = currValue;
            this.changes['rowSelection'] = new import1.SimpleChange(this._expr_19, currValue);
            this._expr_19 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_overlayLoadingTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_20, currValue))) {
            this.changed = true;
            this.context.overlayLoadingTemplate = currValue;
            this.changes['overlayLoadingTemplate'] = new import1.SimpleChange(this._expr_20, currValue);
            this._expr_20 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_overlayNoRowsTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_21, currValue))) {
            this.changed = true;
            this.context.overlayNoRowsTemplate = currValue;
            this.changes['overlayNoRowsTemplate'] = new import1.SimpleChange(this._expr_21, currValue);
            this._expr_21 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_headerCellTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_22, currValue))) {
            this.changed = true;
            this.context.headerCellTemplate = currValue;
            this.changes['headerCellTemplate'] = new import1.SimpleChange(this._expr_22, currValue);
            this._expr_22 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_quickFilterText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_23, currValue))) {
            this.changed = true;
            this.context.quickFilterText = currValue;
            this.changes['quickFilterText'] = new import1.SimpleChange(this._expr_23, currValue);
            this._expr_23 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowModelType = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_24, currValue))) {
            this.changed = true;
            this.context.rowModelType = currValue;
            this.changes['rowModelType'] = new import1.SimpleChange(this._expr_24, currValue);
            this._expr_24 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowHeight = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_25, currValue))) {
            this.changed = true;
            this.context.rowHeight = currValue;
            this.changes['rowHeight'] = new import1.SimpleChange(this._expr_25, currValue);
            this._expr_25 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowBuffer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_26, currValue))) {
            this.changed = true;
            this.context.rowBuffer = currValue;
            this.changes['rowBuffer'] = new import1.SimpleChange(this._expr_26, currValue);
            this._expr_26 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_colWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_27, currValue))) {
            this.changed = true;
            this.context.colWidth = currValue;
            this.changes['colWidth'] = new import1.SimpleChange(this._expr_27, currValue);
            this._expr_27 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_headerHeight = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_28, currValue))) {
            this.changed = true;
            this.context.headerHeight = currValue;
            this.changes['headerHeight'] = new import1.SimpleChange(this._expr_28, currValue);
            this._expr_28 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupDefaultExpanded = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_29, currValue))) {
            this.changed = true;
            this.context.groupDefaultExpanded = currValue;
            this.changes['groupDefaultExpanded'] = new import1.SimpleChange(this._expr_29, currValue);
            this._expr_29 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_minColWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_30, currValue))) {
            this.changed = true;
            this.context.minColWidth = currValue;
            this.changes['minColWidth'] = new import1.SimpleChange(this._expr_30, currValue);
            this._expr_30 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_maxColWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_31, currValue))) {
            this.changed = true;
            this.context.maxColWidth = currValue;
            this.changes['maxColWidth'] = new import1.SimpleChange(this._expr_31, currValue);
            this._expr_31 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_viewportRowModelPageSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_32, currValue))) {
            this.changed = true;
            this.context.viewportRowModelPageSize = currValue;
            this.changes['viewportRowModelPageSize'] = new import1.SimpleChange(this._expr_32, currValue);
            this._expr_32 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_viewportRowModelBufferSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_33, currValue))) {
            this.changed = true;
            this.context.viewportRowModelBufferSize = currValue;
            this.changes['viewportRowModelBufferSize'] = new import1.SimpleChange(this._expr_33, currValue);
            this._expr_33 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_layoutInterval = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_34, currValue))) {
            this.changed = true;
            this.context.layoutInterval = currValue;
            this.changes['layoutInterval'] = new import1.SimpleChange(this._expr_34, currValue);
            this._expr_34 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_autoSizePadding = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_35, currValue))) {
            this.changed = true;
            this.context.autoSizePadding = currValue;
            this.changes['autoSizePadding'] = new import1.SimpleChange(this._expr_35, currValue);
            this._expr_35 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_maxPagesInCache = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_36, currValue))) {
            this.changed = true;
            this.context.maxPagesInCache = currValue;
            this.changes['maxPagesInCache'] = new import1.SimpleChange(this._expr_36, currValue);
            this._expr_36 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_maxConcurrentDatasourceRequests = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_37, currValue))) {
            this.changed = true;
            this.context.maxConcurrentDatasourceRequests = currValue;
            this.changes['maxConcurrentDatasourceRequests'] = new import1.SimpleChange(this._expr_37, currValue);
            this._expr_37 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_paginationOverflowSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_38, currValue))) {
            this.changed = true;
            this.context.paginationOverflowSize = currValue;
            this.changes['paginationOverflowSize'] = new import1.SimpleChange(this._expr_38, currValue);
            this._expr_38 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_paginationPageSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_39, currValue))) {
            this.changed = true;
            this.context.paginationPageSize = currValue;
            this.changes['paginationPageSize'] = new import1.SimpleChange(this._expr_39, currValue);
            this._expr_39 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_paginationInitialRowCount = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_40, currValue))) {
            this.changed = true;
            this.context.paginationInitialRowCount = currValue;
            this.changes['paginationInitialRowCount'] = new import1.SimpleChange(this._expr_40, currValue);
            this._expr_40 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_headerCellRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_41, currValue))) {
            this.changed = true;
            this.context.headerCellRenderer = currValue;
            this.changes['headerCellRenderer'] = new import1.SimpleChange(this._expr_41, currValue);
            this._expr_41 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_localeTextFunc = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_42, currValue))) {
            this.changed = true;
            this.context.localeTextFunc = currValue;
            this.changes['localeTextFunc'] = new import1.SimpleChange(this._expr_42, currValue);
            this._expr_42 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowInnerRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_43, currValue))) {
            this.changed = true;
            this.context.groupRowInnerRenderer = currValue;
            this.changes['groupRowInnerRenderer'] = new import1.SimpleChange(this._expr_43, currValue);
            this._expr_43 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_44, currValue))) {
            this.changed = true;
            this.context.groupRowRenderer = currValue;
            this.changes['groupRowRenderer'] = new import1.SimpleChange(this._expr_44, currValue);
            this._expr_44 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_isScrollLag = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_45, currValue))) {
            this.changed = true;
            this.context.isScrollLag = currValue;
            this.changes['isScrollLag'] = new import1.SimpleChange(this._expr_45, currValue);
            this._expr_45 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_isExternalFilterPresent = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_46, currValue))) {
            this.changed = true;
            this.context.isExternalFilterPresent = currValue;
            this.changes['isExternalFilterPresent'] = new import1.SimpleChange(this._expr_46, currValue);
            this._expr_46 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getRowHeight = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_47, currValue))) {
            this.changed = true;
            this.context.getRowHeight = currValue;
            this.changes['getRowHeight'] = new import1.SimpleChange(this._expr_47, currValue);
            this._expr_47 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_doesExternalFilterPass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_48, currValue))) {
            this.changed = true;
            this.context.doesExternalFilterPass = currValue;
            this.changes['doesExternalFilterPass'] = new import1.SimpleChange(this._expr_48, currValue);
            this._expr_48 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getRowClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_49, currValue))) {
            this.changed = true;
            this.context.getRowClass = currValue;
            this.changes['getRowClass'] = new import1.SimpleChange(this._expr_49, currValue);
            this._expr_49 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getRowStyle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_50, currValue))) {
            this.changed = true;
            this.context.getRowStyle = currValue;
            this.changes['getRowStyle'] = new import1.SimpleChange(this._expr_50, currValue);
            this._expr_50 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getHeaderCellTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_51, currValue))) {
            this.changed = true;
            this.context.getHeaderCellTemplate = currValue;
            this.changes['getHeaderCellTemplate'] = new import1.SimpleChange(this._expr_51, currValue);
            this._expr_51 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_traverseNode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_52, currValue))) {
            this.changed = true;
            this.context.traverseNode = currValue;
            this.changes['traverseNode'] = new import1.SimpleChange(this._expr_52, currValue);
            this._expr_52 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getContextMenuItems = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_53, currValue))) {
            this.changed = true;
            this.context.getContextMenuItems = currValue;
            this.changes['getContextMenuItems'] = new import1.SimpleChange(this._expr_53, currValue);
            this._expr_53 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getMainMenuItems = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_54, currValue))) {
            this.changed = true;
            this.context.getMainMenuItems = currValue;
            this.changes['getMainMenuItems'] = new import1.SimpleChange(this._expr_54, currValue);
            this._expr_54 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_processRowPostCreate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_55, currValue))) {
            this.changed = true;
            this.context.processRowPostCreate = currValue;
            this.changes['processRowPostCreate'] = new import1.SimpleChange(this._expr_55, currValue);
            this._expr_55 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_processCellForClipboard = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_56, currValue))) {
            this.changed = true;
            this.context.processCellForClipboard = currValue;
            this.changes['processCellForClipboard'] = new import1.SimpleChange(this._expr_56, currValue);
            this._expr_56 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getNodeChildDetails = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_57, currValue))) {
            this.changed = true;
            this.context.getNodeChildDetails = currValue;
            this.changes['getNodeChildDetails'] = new import1.SimpleChange(this._expr_57, currValue);
            this._expr_57 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowAggNodes = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_58, currValue))) {
            this.changed = true;
            this.context.groupRowAggNodes = currValue;
            this.changes['groupRowAggNodes'] = new import1.SimpleChange(this._expr_58, currValue);
            this._expr_58 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_getRowNodeId = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_59, currValue))) {
            this.changed = true;
            this.context.getRowNodeId = currValue;
            this.changes['getRowNodeId'] = new import1.SimpleChange(this._expr_59, currValue);
            this._expr_59 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_isFullWidthCell = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_60, currValue))) {
            this.changed = true;
            this.context.isFullWidthCell = currValue;
            this.changes['isFullWidthCell'] = new import1.SimpleChange(this._expr_60, currValue);
            this._expr_60 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_fullWidthCellRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_61, currValue))) {
            this.changed = true;
            this.context.fullWidthCellRenderer = currValue;
            this.changes['fullWidthCellRenderer'] = new import1.SimpleChange(this._expr_61, currValue);
            this._expr_61 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_doesDataFlower = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_62, currValue))) {
            this.changed = true;
            this.context.doesDataFlower = currValue;
            this.changes['doesDataFlower'] = new import1.SimpleChange(this._expr_62, currValue);
            this._expr_62 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_toolPanelSuppressRowGroups = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_63, currValue))) {
            this.changed = true;
            this.context.toolPanelSuppressRowGroups = currValue;
            this.changes['toolPanelSuppressRowGroups'] = new import1.SimpleChange(this._expr_63, currValue);
            this._expr_63 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_toolPanelSuppressValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_64, currValue))) {
            this.changed = true;
            this.context.toolPanelSuppressValues = currValue;
            this.changes['toolPanelSuppressValues'] = new import1.SimpleChange(this._expr_64, currValue);
            this._expr_64 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_toolPanelSuppressPivots = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_65, currValue))) {
            this.changed = true;
            this.context.toolPanelSuppressPivots = currValue;
            this.changes['toolPanelSuppressPivots'] = new import1.SimpleChange(this._expr_65, currValue);
            this._expr_65 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_toolPanelSuppressPivotMode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_66, currValue))) {
            this.changed = true;
            this.context.toolPanelSuppressPivotMode = currValue;
            this.changes['toolPanelSuppressPivotMode'] = new import1.SimpleChange(this._expr_66, currValue);
            this._expr_66 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressRowClickSelection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_67, currValue))) {
            this.changed = true;
            this.context.suppressRowClickSelection = currValue;
            this.changes['suppressRowClickSelection'] = new import1.SimpleChange(this._expr_67, currValue);
            this._expr_67 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressCellSelection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_68, currValue))) {
            this.changed = true;
            this.context.suppressCellSelection = currValue;
            this.changes['suppressCellSelection'] = new import1.SimpleChange(this._expr_68, currValue);
            this._expr_68 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressHorizontalScroll = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_69, currValue))) {
            this.changed = true;
            this.context.suppressHorizontalScroll = currValue;
            this.changes['suppressHorizontalScroll'] = new import1.SimpleChange(this._expr_69, currValue);
            this._expr_69 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_debug = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_70, currValue))) {
            this.changed = true;
            this.context.debug = currValue;
            this.changes['debug'] = new import1.SimpleChange(this._expr_70, currValue);
            this._expr_70 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableColResize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_71, currValue))) {
            this.changed = true;
            this.context.enableColResize = currValue;
            this.changes['enableColResize'] = new import1.SimpleChange(this._expr_71, currValue);
            this._expr_71 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableCellExpressions = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_72, currValue))) {
            this.changed = true;
            this.context.enableCellExpressions = currValue;
            this.changes['enableCellExpressions'] = new import1.SimpleChange(this._expr_72, currValue);
            this._expr_72 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableSorting = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_73, currValue))) {
            this.changed = true;
            this.context.enableSorting = currValue;
            this.changes['enableSorting'] = new import1.SimpleChange(this._expr_73, currValue);
            this._expr_73 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableServerSideSorting = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_74, currValue))) {
            this.changed = true;
            this.context.enableServerSideSorting = currValue;
            this.changes['enableServerSideSorting'] = new import1.SimpleChange(this._expr_74, currValue);
            this._expr_74 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableFilter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_75, currValue))) {
            this.changed = true;
            this.context.enableFilter = currValue;
            this.changes['enableFilter'] = new import1.SimpleChange(this._expr_75, currValue);
            this._expr_75 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableServerSideFilter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_76, currValue))) {
            this.changed = true;
            this.context.enableServerSideFilter = currValue;
            this.changes['enableServerSideFilter'] = new import1.SimpleChange(this._expr_76, currValue);
            this._expr_76 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_angularCompileRows = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_77, currValue))) {
            this.changed = true;
            this.context.angularCompileRows = currValue;
            this.changes['angularCompileRows'] = new import1.SimpleChange(this._expr_77, currValue);
            this._expr_77 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_angularCompileFilters = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_78, currValue))) {
            this.changed = true;
            this.context.angularCompileFilters = currValue;
            this.changes['angularCompileFilters'] = new import1.SimpleChange(this._expr_78, currValue);
            this._expr_78 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_angularCompileHeaders = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_79, currValue))) {
            this.changed = true;
            this.context.angularCompileHeaders = currValue;
            this.changes['angularCompileHeaders'] = new import1.SimpleChange(this._expr_79, currValue);
            this._expr_79 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupSuppressAutoColumn = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_80, currValue))) {
            this.changed = true;
            this.context.groupSuppressAutoColumn = currValue;
            this.changes['groupSuppressAutoColumn'] = new import1.SimpleChange(this._expr_80, currValue);
            this._expr_80 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupSelectsChildren = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_81, currValue))) {
            this.changed = true;
            this.context.groupSelectsChildren = currValue;
            this.changes['groupSelectsChildren'] = new import1.SimpleChange(this._expr_81, currValue);
            this._expr_81 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupIncludeFooter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_82, currValue))) {
            this.changed = true;
            this.context.groupIncludeFooter = currValue;
            this.changes['groupIncludeFooter'] = new import1.SimpleChange(this._expr_82, currValue);
            this._expr_82 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupUseEntireRow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_83, currValue))) {
            this.changed = true;
            this.context.groupUseEntireRow = currValue;
            this.changes['groupUseEntireRow'] = new import1.SimpleChange(this._expr_83, currValue);
            this._expr_83 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupSuppressRow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_84, currValue))) {
            this.changed = true;
            this.context.groupSuppressRow = currValue;
            this.changes['groupSuppressRow'] = new import1.SimpleChange(this._expr_84, currValue);
            this._expr_84 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupSuppressBlankHeader = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_85, currValue))) {
            this.changed = true;
            this.context.groupSuppressBlankHeader = currValue;
            this.changes['groupSuppressBlankHeader'] = new import1.SimpleChange(this._expr_85, currValue);
            this._expr_85 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_forPrint = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_86, currValue))) {
            this.changed = true;
            this.context.forPrint = currValue;
            this.changes['forPrint'] = new import1.SimpleChange(this._expr_86, currValue);
            this._expr_86 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMenuHide = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_87, currValue))) {
            this.changed = true;
            this.context.suppressMenuHide = currValue;
            this.changes['suppressMenuHide'] = new import1.SimpleChange(this._expr_87, currValue);
            this._expr_87 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowDeselection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_88, currValue))) {
            this.changed = true;
            this.context.rowDeselection = currValue;
            this.changes['rowDeselection'] = new import1.SimpleChange(this._expr_88, currValue);
            this._expr_88 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_unSortIcon = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_89, currValue))) {
            this.changed = true;
            this.context.unSortIcon = currValue;
            this.changes['unSortIcon'] = new import1.SimpleChange(this._expr_89, currValue);
            this._expr_89 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMultiSort = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_90, currValue))) {
            this.changed = true;
            this.context.suppressMultiSort = currValue;
            this.changes['suppressMultiSort'] = new import1.SimpleChange(this._expr_90, currValue);
            this._expr_90 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressScrollLag = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_91, currValue))) {
            this.changed = true;
            this.context.suppressScrollLag = currValue;
            this.changes['suppressScrollLag'] = new import1.SimpleChange(this._expr_91, currValue);
            this._expr_91 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_singleClickEdit = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_92, currValue))) {
            this.changed = true;
            this.context.singleClickEdit = currValue;
            this.changes['singleClickEdit'] = new import1.SimpleChange(this._expr_92, currValue);
            this._expr_92 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressLoadingOverlay = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_93, currValue))) {
            this.changed = true;
            this.context.suppressLoadingOverlay = currValue;
            this.changes['suppressLoadingOverlay'] = new import1.SimpleChange(this._expr_93, currValue);
            this._expr_93 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressNoRowsOverlay = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_94, currValue))) {
            this.changed = true;
            this.context.suppressNoRowsOverlay = currValue;
            this.changes['suppressNoRowsOverlay'] = new import1.SimpleChange(this._expr_94, currValue);
            this._expr_94 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressAutoSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_95, currValue))) {
            this.changed = true;
            this.context.suppressAutoSize = currValue;
            this.changes['suppressAutoSize'] = new import1.SimpleChange(this._expr_95, currValue);
            this._expr_95 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressParentsInRowNodes = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_96, currValue))) {
            this.changed = true;
            this.context.suppressParentsInRowNodes = currValue;
            this.changes['suppressParentsInRowNodes'] = new import1.SimpleChange(this._expr_96, currValue);
            this._expr_96 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_showToolPanel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_97, currValue))) {
            this.changed = true;
            this.context.showToolPanel = currValue;
            this.changes['showToolPanel'] = new import1.SimpleChange(this._expr_97, currValue);
            this._expr_97 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressColumnMoveAnimation = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_98, currValue))) {
            this.changed = true;
            this.context.suppressColumnMoveAnimation = currValue;
            this.changes['suppressColumnMoveAnimation'] = new import1.SimpleChange(this._expr_98, currValue);
            this._expr_98 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMovableColumns = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_99, currValue))) {
            this.changed = true;
            this.context.suppressMovableColumns = currValue;
            this.changes['suppressMovableColumns'] = new import1.SimpleChange(this._expr_99, currValue);
            this._expr_99 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressFieldDotNotation = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_100, currValue))) {
            this.changed = true;
            this.context.suppressFieldDotNotation = currValue;
            this.changes['suppressFieldDotNotation'] = new import1.SimpleChange(this._expr_100, currValue);
            this._expr_100 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableRangeSelection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_101, currValue))) {
            this.changed = true;
            this.context.enableRangeSelection = currValue;
            this.changes['enableRangeSelection'] = new import1.SimpleChange(this._expr_101, currValue);
            this._expr_101 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressEnterprise = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_102, currValue))) {
            this.changed = true;
            this.context.suppressEnterprise = currValue;
            this.changes['suppressEnterprise'] = new import1.SimpleChange(this._expr_102, currValue);
            this._expr_102 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rowGroupPanelShow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_103, currValue))) {
            this.changed = true;
            this.context.rowGroupPanelShow = currValue;
            this.changes['rowGroupPanelShow'] = new import1.SimpleChange(this._expr_103, currValue);
            this._expr_103 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_pivotPanelShow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_104, currValue))) {
            this.changed = true;
            this.context.pivotPanelShow = currValue;
            this.changes['pivotPanelShow'] = new import1.SimpleChange(this._expr_104, currValue);
            this._expr_104 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressContextMenu = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_105, currValue))) {
            this.changed = true;
            this.context.suppressContextMenu = currValue;
            this.changes['suppressContextMenu'] = new import1.SimpleChange(this._expr_105, currValue);
            this._expr_105 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMenuFilterPanel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_106, currValue))) {
            this.changed = true;
            this.context.suppressMenuFilterPanel = currValue;
            this.changes['suppressMenuFilterPanel'] = new import1.SimpleChange(this._expr_106, currValue);
            this._expr_106 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMenuMainPanel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_107, currValue))) {
            this.changed = true;
            this.context.suppressMenuMainPanel = currValue;
            this.changes['suppressMenuMainPanel'] = new import1.SimpleChange(this._expr_107, currValue);
            this._expr_107 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMenuColumnPanel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_108, currValue))) {
            this.changed = true;
            this.context.suppressMenuColumnPanel = currValue;
            this.changes['suppressMenuColumnPanel'] = new import1.SimpleChange(this._expr_108, currValue);
            this._expr_108 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableStatusBar = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_109, currValue))) {
            this.changed = true;
            this.context.enableStatusBar = currValue;
            this.changes['enableStatusBar'] = new import1.SimpleChange(this._expr_109, currValue);
            this._expr_109 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_rememberGroupStateWhenNewData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_110, currValue))) {
            this.changed = true;
            this.context.rememberGroupStateWhenNewData = currValue;
            this.changes['rememberGroupStateWhenNewData'] = new import1.SimpleChange(this._expr_110, currValue);
            this._expr_110 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_enableCellChangeFlash = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_111, currValue))) {
            this.changed = true;
            this.context.enableCellChangeFlash = currValue;
            this.changes['enableCellChangeFlash'] = new import1.SimpleChange(this._expr_111, currValue);
            this._expr_111 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressDragLeaveHidesColumns = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_112, currValue))) {
            this.changed = true;
            this.context.suppressDragLeaveHidesColumns = currValue;
            this.changes['suppressDragLeaveHidesColumns'] = new import1.SimpleChange(this._expr_112, currValue);
            this._expr_112 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressMiddleClickScrolls = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_113, currValue))) {
            this.changed = true;
            this.context.suppressMiddleClickScrolls = currValue;
            this.changes['suppressMiddleClickScrolls'] = new import1.SimpleChange(this._expr_113, currValue);
            this._expr_113 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressPreventDefaultOnMouseWheel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_114, currValue))) {
            this.changed = true;
            this.context.suppressPreventDefaultOnMouseWheel = currValue;
            this.changes['suppressPreventDefaultOnMouseWheel'] = new import1.SimpleChange(this._expr_114, currValue);
            this._expr_114 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressUseColIdForGroups = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_115, currValue))) {
            this.changed = true;
            this.context.suppressUseColIdForGroups = currValue;
            this.changes['suppressUseColIdForGroups'] = new import1.SimpleChange(this._expr_115, currValue);
            this._expr_115 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressCopyRowsToClipboard = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_116, currValue))) {
            this.changed = true;
            this.context.suppressCopyRowsToClipboard = currValue;
            this.changes['suppressCopyRowsToClipboard'] = new import1.SimpleChange(this._expr_116, currValue);
            this._expr_116 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_pivotMode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_117, currValue))) {
            this.changed = true;
            this.context.pivotMode = currValue;
            this.changes['pivotMode'] = new import1.SimpleChange(this._expr_117, currValue);
            this._expr_117 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressAggFuncInHeader = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_118, currValue))) {
            this.changed = true;
            this.context.suppressAggFuncInHeader = currValue;
            this.changes['suppressAggFuncInHeader'] = new import1.SimpleChange(this._expr_118, currValue);
            this._expr_118 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressColumnVirtualisation = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_119, currValue))) {
            this.changed = true;
            this.context.suppressColumnVirtualisation = currValue;
            this.changes['suppressColumnVirtualisation'] = new import1.SimpleChange(this._expr_119, currValue);
            this._expr_119 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressFocusAfterRefresh = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_120, currValue))) {
            this.changed = true;
            this.context.suppressFocusAfterRefresh = currValue;
            this.changes['suppressFocusAfterRefresh'] = new import1.SimpleChange(this._expr_120, currValue);
            this._expr_120 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_functionsPassive = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_121, currValue))) {
            this.changed = true;
            this.context.functionsPassive = currValue;
            this.changes['functionsPassive'] = new import1.SimpleChange(this._expr_121, currValue);
            this._expr_121 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_functionsReadOnly = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_122, currValue))) {
            this.changed = true;
            this.context.functionsReadOnly = currValue;
            this.changes['functionsReadOnly'] = new import1.SimpleChange(this._expr_122, currValue);
            this._expr_122 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_defaultColGroupDef = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_123, currValue))) {
            this.changed = true;
            this.context.defaultColGroupDef = currValue;
            this.changes['defaultColGroupDef'] = new import1.SimpleChange(this._expr_123, currValue);
            this._expr_123 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_editType = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_124, currValue))) {
            this.changed = true;
            this.context.editType = currValue;
            this.changes['editType'] = new import1.SimpleChange(this._expr_124, currValue);
            this._expr_124 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_scrollbarWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_125, currValue))) {
            this.changed = true;
            this.context.scrollbarWidth = currValue;
            this.changes['scrollbarWidth'] = new import1.SimpleChange(this._expr_125, currValue);
            this._expr_125 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowInnerRendererFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_126, currValue))) {
            this.changed = true;
            this.context.groupRowInnerRendererFramework = currValue;
            this.changes['groupRowInnerRendererFramework'] = new import1.SimpleChange(this._expr_126, currValue);
            this._expr_126 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_groupRowRendererFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_127, currValue))) {
            this.changed = true;
            this.context.groupRowRendererFramework = currValue;
            this.changes['groupRowRendererFramework'] = new import1.SimpleChange(this._expr_127, currValue);
            this._expr_127 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_fullWidthCellRendererFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_128, currValue))) {
            this.changed = true;
            this.context.fullWidthCellRendererFramework = currValue;
            this.changes['fullWidthCellRendererFramework'] = new import1.SimpleChange(this._expr_128, currValue);
            this._expr_128 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_processSecondaryColDef = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_129, currValue))) {
            this.changed = true;
            this.context.processSecondaryColDef = currValue;
            this.changes['processSecondaryColDef'] = new import1.SimpleChange(this._expr_129, currValue);
            this._expr_129 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_processSecondaryColGroupDef = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_130, currValue))) {
            this.changed = true;
            this.context.processSecondaryColGroupDef = currValue;
            this.changes['processSecondaryColGroupDef'] = new import1.SimpleChange(this._expr_130, currValue);
            this._expr_130 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressRowHoverClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_131, currValue))) {
            this.changed = true;
            this.context.suppressRowHoverClass = currValue;
            this.changes['suppressRowHoverClass'] = new import1.SimpleChange(this._expr_131, currValue);
            this._expr_131 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.check_suppressTouch = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_132, currValue))) {
            this.changed = true;
            this.context.suppressTouch = currValue;
            this.changes['suppressTouch'] = new import1.SimpleChange(this._expr_132, currValue);
            this._expr_132 = currValue;
        }
    };
    Wrapper_AgGridNg2.prototype.detectChangesInInputProps = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_AgGridNg2.prototype.detectChangesInHostProps = function (view, el, throwOnChange) {
    };
    return Wrapper_AgGridNg2;
}());
exports.Wrapper_AgGridNg2 = Wrapper_AgGridNg2;
var renderType_AgGridNg2_Host = null;
var _View_AgGridNg2_Host0 = (function (_super) {
    __extends(_View_AgGridNg2_Host0, _super);
    function _View_AgGridNg2_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_AgGridNg2_Host0, renderType_AgGridNg2_Host, import8.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_AgGridNg2_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer, 'ag-grid-ng2', import2.EMPTY_INLINE_ARRAY, rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_AgGridNg20(this.viewUtils, this.injector(0), this._appEl_0);
        this._AgGridNg2_0_5 = new Wrapper_AgGridNg2(new import9.ElementRef(this._el_0), this._appEl_0.vcRef, this.parentInjector.get(import10.Ng2FrameworkFactory));
        this._query_AgGridColumn_0_0 = new import6.QueryList();
        this._appEl_0.initComponent(this._AgGridNg2_0_5.context, [], compView_0);
        compView_0.create(this._AgGridNg2_0_5.context, this.projectableNodes, null);
        this.init([].concat([this._appEl_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_AgGridNg2_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.AgGridNg2) && (0 === requestNodeIndex))) {
            return this._AgGridNg2_0_5.context;
        }
        return notFoundResult;
    };
    _View_AgGridNg2_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._AgGridNg2_0_5.detectChangesInInputProps(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if (this._query_AgGridColumn_0_0.dirty) {
                this._query_AgGridColumn_0_0.reset([]);
                this._AgGridNg2_0_5.context.columns = this._query_AgGridColumn_0_0;
                this._query_AgGridColumn_0_0.notifyOnChanges();
            }
        }
        this._AgGridNg2_0_5.detectChangesInHostProps(this, this._el_0, throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._AgGridNg2_0_5.context.ngAfterViewInit();
            }
        }
    };
    _View_AgGridNg2_Host0.prototype.destroyInternal = function () {
        this._AgGridNg2_0_5.context.ngOnDestroy();
    };
    return _View_AgGridNg2_Host0;
}(import3.AppView));
function viewFactory_AgGridNg2_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_AgGridNg2_Host === null)) {
        (renderType_AgGridNg2_Host = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, [], {}));
    }
    return new _View_AgGridNg2_Host0(viewUtils, parentInjector, declarationEl);
}
exports.AgGridNg2NgFactory = new import12.ComponentFactory('ag-grid-ng2', viewFactory_AgGridNg2_Host0, import0.AgGridNg2);
var styles_AgGridNg2 = [];
var renderType_AgGridNg2 = null;
var _View_AgGridNg20 = (function (_super) {
    __extends(_View_AgGridNg20, _super);
    function _View_AgGridNg20(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_AgGridNg20, renderType_AgGridNg2, import8.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_AgGridNg20.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.init([], [], [], []);
        return null;
    };
    return _View_AgGridNg20;
}(import3.AppView));
function viewFactory_AgGridNg20(viewUtils, parentInjector, declarationEl) {
    if ((renderType_AgGridNg2 === null)) {
        (renderType_AgGridNg2 = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, styles_AgGridNg2, {}));
    }
    return new _View_AgGridNg20(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_AgGridNg20 = viewFactory_AgGridNg20;
