// ag-grid-aurelia v7.0.0-beta.0
import { ComponentAttached, ComponentDetached, Container, ViewResources, TaskQueue } from 'aurelia-framework';
import { GridOptions, GridApi, ColumnApi } from 'ag-grid/main';
import { AureliaFrameworkFactory } from "./aureliaFrameworkFactory";
import { AgGridColumn } from "./agGridColumn";
export declare class AgGridAurelia implements ComponentAttached, ComponentDetached {
    private taskQueue;
    private auFrameworkFactory;
    private container;
    private viewResources;
    private _nativeElement;
    private _initialised;
    private _destroyed;
    private gridParams;
    api: GridApi;
    columnApi: ColumnApi;
    columns: AgGridColumn[];
    constructor(element: Element, taskQueue: TaskQueue, auFrameworkFactory: AureliaFrameworkFactory, container: Container, viewResources: ViewResources);
    attached(): void;
    initGrid(): void;
    /**
     * Called by Aurelia whenever a bound property changes
     */
    propertyChanged(propertyName: string, newValue: any, oldValue: any): void;
    detached(): void;
    private globalEventListener(eventType, event);
    /**
     * inputs example: grid-options.bind="yourViewModelProperty"
     */
    gridOptions: GridOptions;
    slaveGrids: any;
    rowData: any;
    floatingTopRowData: any;
    floatingBottomRowData: any;
    columnDefs: any;
    rowStyle: any;
    context: any;
    groupColumnDef: any;
    localeText: any;
    icons: any;
    datasource: any;
    viewportDatasource: any;
    groupRowRendererParams: any;
    aggFuncs: any;
    fullWidthCellRendererParams: any;
    sortingOrder: any;
    rowClass: any;
    rowSelection: any;
    overlayLoadingTemplate: any;
    overlayNoRowsTemplate: any;
    headerCellTemplate: any;
    quickFilterText: any;
    rowModelType: any;
    rowHeight: any;
    rowBuffer: any;
    colWidth: any;
    headerHeight: any;
    groupDefaultExpanded: any;
    minColWidth: any;
    maxColWidth: any;
    viewportRowModelPageSize: any;
    viewportRowModelBufferSize: any;
    layoutInterval: any;
    autoSizePadding: any;
    maxPagesInCache: any;
    maxConcurrentDatasourceRequests: any;
    paginationOverflowSize: any;
    paginationPageSize: any;
    paginationInitialRowCount: any;
    headerCellRenderer: any;
    localeTextFunc: any;
    groupRowInnerRenderer: any;
    groupRowRenderer: any;
    isScrollLag: any;
    isExternalFilterPresent: any;
    getRowHeight: any;
    doesExternalFilterPass: any;
    getRowClass: any;
    getRowStyle: any;
    getHeaderCellTemplate: any;
    traverseNode: any;
    getContextMenuItems: any;
    getMainMenuItems: any;
    processRowPostCreate: any;
    processCellForClipboard: any;
    getNodeChildDetails: any;
    groupRowAggNodes: any;
    getRowNodeId: any;
    isFullWidthCell: any;
    fullWidthCellRenderer: any;
    doesDataFlower: any;
    toolPanelSuppressRowGroups: any;
    toolPanelSuppressValues: any;
    toolPanelSuppressPivots: any;
    toolPanelSuppressPivotMode: any;
    suppressRowClickSelection: any;
    suppressCellSelection: any;
    suppressHorizontalScroll: any;
    debug: any;
    enableColResize: any;
    enableCellExpressions: any;
    enableSorting: any;
    enableServerSideSorting: any;
    enableFilter: any;
    enableServerSideFilter: any;
    angularCompileRows: any;
    angularCompileFilters: any;
    angularCompileHeaders: any;
    groupSuppressAutoColumn: any;
    groupSelectsChildren: any;
    groupIncludeFooter: any;
    groupUseEntireRow: any;
    groupSuppressRow: any;
    groupSuppressBlankHeader: any;
    forPrint: any;
    suppressMenuHide: any;
    rowDeselection: any;
    unSortIcon: any;
    suppressMultiSort: any;
    suppressScrollLag: any;
    singleClickEdit: any;
    suppressLoadingOverlay: any;
    suppressNoRowsOverlay: any;
    suppressAutoSize: any;
    suppressParentsInRowNodes: any;
    showToolPanel: any;
    suppressColumnMoveAnimation: any;
    suppressMovableColumns: any;
    suppressFieldDotNotation: any;
    enableRangeSelection: any;
    suppressEnterprise: any;
    rowGroupPanelShow: any;
    pivotPanelShow: any;
    suppressContextMenu: any;
    suppressMenuFilterPanel: any;
    suppressMenuMainPanel: any;
    suppressMenuColumnPanel: any;
    enableStatusBar: any;
    rememberGroupStateWhenNewData: any;
    enableCellChangeFlash: any;
    suppressDragLeaveHidesColumns: any;
    suppressMiddleClickScrolls: any;
    suppressPreventDefaultOnMouseWheel: any;
    suppressUseColIdForGroups: any;
    suppressCopyRowsToClipboard: any;
    pivotMode: any;
    suppressAggFuncInHeader: any;
    suppressColumnVirtualisation: any;
    suppressFocusAfterRefresh: any;
    functionsPassive: any;
    functionsReadOnly: any;
    /**
     * Outputs - example: grid-ready.call="yourViewModelFunction()"
     */
    gridReady: () => any;
    columnEverythingChanged: () => any;
    newColumnsLoaded: () => any;
    columnPivotModeChanged: () => any;
    columnRowGroupChanged: () => any;
    columnPivotChanged: () => any;
    gridColumnsChanged: () => any;
    columnValueChanged: () => any;
    columnMoved: () => any;
    columnVisible: () => any;
    columnPinned: () => any;
    columnGroupOpened: () => any;
    columnResized: () => any;
    displayedColumnsChanged: () => any;
    virtualColumnsChanged: () => any;
    rowGroupOpened: () => any;
    rowDataChanged: () => any;
    floatingRowDataChanged: () => any;
    rangeSelectionChanged: () => any;
    columnRowGroupAddRequest: () => any;
    columnRowGroupRemoveRequest: () => any;
    columnPivotAddRequest: () => any;
    columnPivotRemoveRequest: () => any;
    columnValueAddRequest: () => any;
    columnValueRemoveRequest: () => any;
    columnAggFuncChangeRequest: () => any;
    clipboardPaste: () => any;
    modelUpdated: () => any;
    cellClicked: () => any;
    cellDoubleClicked: () => any;
    cellContextMenu: () => any;
    cellValueChanged: () => any;
    cellFocused: () => any;
    rowSelected: () => any;
    selectionChanged: () => any;
    beforeFilterChanged: () => any;
    filterChanged: () => any;
    afterFilterChanged: () => any;
    filterModified: () => any;
    beforeSortChanged: () => any;
    sortChanged: () => any;
    afterSortChanged: () => any;
    virtualRowRemoved: () => any;
    rowClicked: () => any;
    rowDoubleClicked: () => any;
    gridSizeChanged: () => any;
    viewportChanged: () => any;
    dragStarted: () => any;
    dragStopped: () => any;
    itemsAdded: () => any;
    itemsRemoved: () => any;
}
